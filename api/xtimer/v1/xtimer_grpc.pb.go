// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: api/xtimer/v1/xtimer.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	XTimer_CreateTimer_FullMethodName = "/api.xtimer.v1.XTimer/CreateTimer"
	XTimer_EnableTimer_FullMethodName = "/api.xtimer.v1.XTimer/EnableTimer"
)

// XTimerClient is the client API for XTimer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type XTimerClient interface {
	CreateTimer(ctx context.Context, in *CreateTimerRequest, opts ...grpc.CallOption) (*CreateTimerReply, error)
	EnableTimer(ctx context.Context, in *EnableTimerRequest, opts ...grpc.CallOption) (*EnableTimerReply, error)
}

type xTimerClient struct {
	cc grpc.ClientConnInterface
}

func NewXTimerClient(cc grpc.ClientConnInterface) XTimerClient {
	return &xTimerClient{cc}
}

func (c *xTimerClient) CreateTimer(ctx context.Context, in *CreateTimerRequest, opts ...grpc.CallOption) (*CreateTimerReply, error) {
	out := new(CreateTimerReply)
	err := c.cc.Invoke(ctx, XTimer_CreateTimer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xTimerClient) EnableTimer(ctx context.Context, in *EnableTimerRequest, opts ...grpc.CallOption) (*EnableTimerReply, error) {
	out := new(EnableTimerReply)
	err := c.cc.Invoke(ctx, XTimer_EnableTimer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// XTimerServer is the server API for XTimer service.
// All implementations must embed UnimplementedXTimerServer
// for forward compatibility
type XTimerServer interface {
	CreateTimer(context.Context, *CreateTimerRequest) (*CreateTimerReply, error)
	EnableTimer(context.Context, *EnableTimerRequest) (*EnableTimerReply, error)
	mustEmbedUnimplementedXTimerServer()
}

// UnimplementedXTimerServer must be embedded to have forward compatible implementations.
type UnimplementedXTimerServer struct {
}

func (UnimplementedXTimerServer) CreateTimer(context.Context, *CreateTimerRequest) (*CreateTimerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTimer not implemented")
}
func (UnimplementedXTimerServer) EnableTimer(context.Context, *EnableTimerRequest) (*EnableTimerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableTimer not implemented")
}
func (UnimplementedXTimerServer) mustEmbedUnimplementedXTimerServer() {}

// UnsafeXTimerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to XTimerServer will
// result in compilation errors.
type UnsafeXTimerServer interface {
	mustEmbedUnimplementedXTimerServer()
}

func RegisterXTimerServer(s grpc.ServiceRegistrar, srv XTimerServer) {
	s.RegisterService(&XTimer_ServiceDesc, srv)
}

func _XTimer_CreateTimer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTimerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XTimerServer).CreateTimer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: XTimer_CreateTimer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XTimerServer).CreateTimer(ctx, req.(*CreateTimerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _XTimer_EnableTimer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableTimerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XTimerServer).EnableTimer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: XTimer_EnableTimer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XTimerServer).EnableTimer(ctx, req.(*EnableTimerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// XTimer_ServiceDesc is the grpc.ServiceDesc for XTimer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var XTimer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.xtimer.v1.XTimer",
	HandlerType: (*XTimerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTimer",
			Handler:    _XTimer_CreateTimer_Handler,
		},
		{
			MethodName: "EnableTimer",
			Handler:    _XTimer_EnableTimer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/xtimer/v1/xtimer.proto",
}
