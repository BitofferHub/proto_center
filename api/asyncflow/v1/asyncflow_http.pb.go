// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v3.20.3
// source: asyncflow/v1/asyncflow.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAsyncFlowCreateTask = "/api.asyncflow.v1.AsyncFlow/CreateTask"
const OperationAsyncFlowGetTask = "/api.asyncflow.v1.AsyncFlow/GetTask"
const OperationAsyncFlowGetTaskCountsByType = "/api.asyncflow.v1.AsyncFlow/GetTaskCountsByType"
const OperationAsyncFlowGetTaskList = "/api.asyncflow.v1.AsyncFlow/GetTaskList"
const OperationAsyncFlowGetTaskScheduleCfgList = "/api.asyncflow.v1.AsyncFlow/GetTaskScheduleCfgList"
const OperationAsyncFlowHoldTasks = "/api.asyncflow.v1.AsyncFlow/HoldTasks"
const OperationAsyncFlowPing = "/api.asyncflow.v1.AsyncFlow/Ping"
const OperationAsyncFlowRegisterTask = "/api.asyncflow.v1.AsyncFlow/RegisterTask"
const OperationAsyncFlowSetTask = "/api.asyncflow.v1.AsyncFlow/SetTask"

type AsyncFlowHTTPServer interface {
	CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskReply, error)
	GetTask(context.Context, *GetTaskRequest) (*GetTaskReply, error)
	GetTaskCountsByType(context.Context, *GetTaskCountsByTypeRequest) (*GetTaskCountsByTypeReply, error)
	GetTaskList(context.Context, *GetTaskListRequest) (*GetTaskListReply, error)
	GetTaskScheduleCfgList(context.Context, *GetTaskScheduleCfgListRequest) (*GetTaskScheduleCfgListReply, error)
	HoldTasks(context.Context, *HoldTasksRequest) (*HoldTasksReply, error)
	Ping(context.Context, *PingRequest) (*PingReply, error)
	RegisterTask(context.Context, *RegisterTaskRequest) (*RegisterTaskReply, error)
	SetTask(context.Context, *SetTaskRequest) (*SetTaskReply, error)
}

func RegisterAsyncFlowHTTPServer(s *http.Server, srv AsyncFlowHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/create_task", _AsyncFlow_CreateTask0_HTTP_Handler(srv))
	r.POST("/v1/hold_tasks", _AsyncFlow_HoldTasks0_HTTP_Handler(srv))
	r.GET("/v1/get_task_list", _AsyncFlow_GetTaskList0_HTTP_Handler(srv))
	r.GET("/v1/get_task_schedule_cfg_list", _AsyncFlow_GetTaskScheduleCfgList0_HTTP_Handler(srv))
	r.GET("/v1/get_task", _AsyncFlow_GetTask0_HTTP_Handler(srv))
	r.POST("/v1/set_task", _AsyncFlow_SetTask0_HTTP_Handler(srv))
	r.GET("/v1/get_task_counts_by_type", _AsyncFlow_GetTaskCountsByType0_HTTP_Handler(srv))
	r.POST("/v1/register_task", _AsyncFlow_RegisterTask0_HTTP_Handler(srv))
	r.GET("/v1/ping", _AsyncFlow_Ping0_HTTP_Handler(srv))
}

func _AsyncFlow_CreateTask0_HTTP_Handler(srv AsyncFlowHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateTaskRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAsyncFlowCreateTask)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateTask(ctx, req.(*CreateTaskRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateTaskReply)
		return ctx.Result(200, reply)
	}
}

func _AsyncFlow_HoldTasks0_HTTP_Handler(srv AsyncFlowHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HoldTasksRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAsyncFlowHoldTasks)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.HoldTasks(ctx, req.(*HoldTasksRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HoldTasksReply)
		return ctx.Result(200, reply)
	}
}

func _AsyncFlow_GetTaskList0_HTTP_Handler(srv AsyncFlowHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTaskListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAsyncFlowGetTaskList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTaskList(ctx, req.(*GetTaskListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTaskListReply)
		return ctx.Result(200, reply)
	}
}

func _AsyncFlow_GetTaskScheduleCfgList0_HTTP_Handler(srv AsyncFlowHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTaskScheduleCfgListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAsyncFlowGetTaskScheduleCfgList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTaskScheduleCfgList(ctx, req.(*GetTaskScheduleCfgListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTaskScheduleCfgListReply)
		return ctx.Result(200, reply)
	}
}

func _AsyncFlow_GetTask0_HTTP_Handler(srv AsyncFlowHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTaskRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAsyncFlowGetTask)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTask(ctx, req.(*GetTaskRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTaskReply)
		return ctx.Result(200, reply)
	}
}

func _AsyncFlow_SetTask0_HTTP_Handler(srv AsyncFlowHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetTaskRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAsyncFlowSetTask)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetTask(ctx, req.(*SetTaskRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetTaskReply)
		return ctx.Result(200, reply)
	}
}

func _AsyncFlow_GetTaskCountsByType0_HTTP_Handler(srv AsyncFlowHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTaskCountsByTypeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAsyncFlowGetTaskCountsByType)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTaskCountsByType(ctx, req.(*GetTaskCountsByTypeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTaskCountsByTypeReply)
		return ctx.Result(200, reply)
	}
}

func _AsyncFlow_RegisterTask0_HTTP_Handler(srv AsyncFlowHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RegisterTaskRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAsyncFlowRegisterTask)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RegisterTask(ctx, req.(*RegisterTaskRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RegisterTaskReply)
		return ctx.Result(200, reply)
	}
}

func _AsyncFlow_Ping0_HTTP_Handler(srv AsyncFlowHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PingRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAsyncFlowPing)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Ping(ctx, req.(*PingRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PingReply)
		return ctx.Result(200, reply)
	}
}

type AsyncFlowHTTPClient interface {
	CreateTask(ctx context.Context, req *CreateTaskRequest, opts ...http.CallOption) (rsp *CreateTaskReply, err error)
	GetTask(ctx context.Context, req *GetTaskRequest, opts ...http.CallOption) (rsp *GetTaskReply, err error)
	GetTaskCountsByType(ctx context.Context, req *GetTaskCountsByTypeRequest, opts ...http.CallOption) (rsp *GetTaskCountsByTypeReply, err error)
	GetTaskList(ctx context.Context, req *GetTaskListRequest, opts ...http.CallOption) (rsp *GetTaskListReply, err error)
	GetTaskScheduleCfgList(ctx context.Context, req *GetTaskScheduleCfgListRequest, opts ...http.CallOption) (rsp *GetTaskScheduleCfgListReply, err error)
	HoldTasks(ctx context.Context, req *HoldTasksRequest, opts ...http.CallOption) (rsp *HoldTasksReply, err error)
	Ping(ctx context.Context, req *PingRequest, opts ...http.CallOption) (rsp *PingReply, err error)
	RegisterTask(ctx context.Context, req *RegisterTaskRequest, opts ...http.CallOption) (rsp *RegisterTaskReply, err error)
	SetTask(ctx context.Context, req *SetTaskRequest, opts ...http.CallOption) (rsp *SetTaskReply, err error)
}

type AsyncFlowHTTPClientImpl struct {
	cc *http.Client
}

func NewAsyncFlowHTTPClient(client *http.Client) AsyncFlowHTTPClient {
	return &AsyncFlowHTTPClientImpl{client}
}

func (c *AsyncFlowHTTPClientImpl) CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...http.CallOption) (*CreateTaskReply, error) {
	var out CreateTaskReply
	pattern := "/v1/create_task"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAsyncFlowCreateTask))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AsyncFlowHTTPClientImpl) GetTask(ctx context.Context, in *GetTaskRequest, opts ...http.CallOption) (*GetTaskReply, error) {
	var out GetTaskReply
	pattern := "/v1/get_task"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAsyncFlowGetTask))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AsyncFlowHTTPClientImpl) GetTaskCountsByType(ctx context.Context, in *GetTaskCountsByTypeRequest, opts ...http.CallOption) (*GetTaskCountsByTypeReply, error) {
	var out GetTaskCountsByTypeReply
	pattern := "/v1/get_task_counts_by_type"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAsyncFlowGetTaskCountsByType))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AsyncFlowHTTPClientImpl) GetTaskList(ctx context.Context, in *GetTaskListRequest, opts ...http.CallOption) (*GetTaskListReply, error) {
	var out GetTaskListReply
	pattern := "/v1/get_task_list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAsyncFlowGetTaskList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AsyncFlowHTTPClientImpl) GetTaskScheduleCfgList(ctx context.Context, in *GetTaskScheduleCfgListRequest, opts ...http.CallOption) (*GetTaskScheduleCfgListReply, error) {
	var out GetTaskScheduleCfgListReply
	pattern := "/v1/get_task_schedule_cfg_list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAsyncFlowGetTaskScheduleCfgList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AsyncFlowHTTPClientImpl) HoldTasks(ctx context.Context, in *HoldTasksRequest, opts ...http.CallOption) (*HoldTasksReply, error) {
	var out HoldTasksReply
	pattern := "/v1/hold_tasks"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAsyncFlowHoldTasks))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AsyncFlowHTTPClientImpl) Ping(ctx context.Context, in *PingRequest, opts ...http.CallOption) (*PingReply, error) {
	var out PingReply
	pattern := "/v1/ping"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAsyncFlowPing))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AsyncFlowHTTPClientImpl) RegisterTask(ctx context.Context, in *RegisterTaskRequest, opts ...http.CallOption) (*RegisterTaskReply, error) {
	var out RegisterTaskReply
	pattern := "/v1/register_task"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAsyncFlowRegisterTask))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AsyncFlowHTTPClientImpl) SetTask(ctx context.Context, in *SetTaskRequest, opts ...http.CallOption) (*SetTaskReply, error) {
	var out SetTaskReply
	pattern := "/v1/set_task"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAsyncFlowSetTask))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
