// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.1
// source: asyncflow/v1/asyncflow.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AsyncFlow_CreateTask_FullMethodName             = "/api.asyncflow.v1.AsyncFlow/CreateTask"
	AsyncFlow_HoldTasks_FullMethodName              = "/api.asyncflow.v1.AsyncFlow/HoldTasks"
	AsyncFlow_GetTaskList_FullMethodName            = "/api.asyncflow.v1.AsyncFlow/GetTaskList"
	AsyncFlow_GetTaskScheduleCfgList_FullMethodName = "/api.asyncflow.v1.AsyncFlow/GetTaskScheduleCfgList"
	AsyncFlow_GetTask_FullMethodName                = "/api.asyncflow.v1.AsyncFlow/GetTask"
	AsyncFlow_SetTask_FullMethodName                = "/api.asyncflow.v1.AsyncFlow/SetTask"
	AsyncFlow_GetTaskCountsByType_FullMethodName    = "/api.asyncflow.v1.AsyncFlow/GetTaskCountsByType"
	AsyncFlow_RegisterTask_FullMethodName           = "/api.asyncflow.v1.AsyncFlow/RegisterTask"
	AsyncFlow_Ping_FullMethodName                   = "/api.asyncflow.v1.AsyncFlow/Ping"
)

// AsyncFlowClient is the client API for AsyncFlow service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AsyncFlowClient interface {
	CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskReply, error)
	HoldTasks(ctx context.Context, in *HoldTasksRequest, opts ...grpc.CallOption) (*HoldTasksReply, error)
	GetTaskList(ctx context.Context, in *GetTaskListRequest, opts ...grpc.CallOption) (*GetTaskListReply, error)
	GetTaskScheduleCfgList(ctx context.Context, in *GetTaskScheduleCfgListRequest, opts ...grpc.CallOption) (*GetTaskScheduleCfgListReply, error)
	GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*GetTaskReply, error)
	SetTask(ctx context.Context, in *SetTaskRequest, opts ...grpc.CallOption) (*SetTaskReply, error)
	GetTaskCountsByType(ctx context.Context, in *GetTaskCountsByTypeRequest, opts ...grpc.CallOption) (*GetTaskCountsByTypeReply, error)
	RegisterTask(ctx context.Context, in *RegisterTaskRequest, opts ...grpc.CallOption) (*RegisterTaskReply, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error)
}

type asyncFlowClient struct {
	cc grpc.ClientConnInterface
}

func NewAsyncFlowClient(cc grpc.ClientConnInterface) AsyncFlowClient {
	return &asyncFlowClient{cc}
}

func (c *asyncFlowClient) CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskReply, error) {
	out := new(CreateTaskReply)
	err := c.cc.Invoke(ctx, AsyncFlow_CreateTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asyncFlowClient) HoldTasks(ctx context.Context, in *HoldTasksRequest, opts ...grpc.CallOption) (*HoldTasksReply, error) {
	out := new(HoldTasksReply)
	err := c.cc.Invoke(ctx, AsyncFlow_HoldTasks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asyncFlowClient) GetTaskList(ctx context.Context, in *GetTaskListRequest, opts ...grpc.CallOption) (*GetTaskListReply, error) {
	out := new(GetTaskListReply)
	err := c.cc.Invoke(ctx, AsyncFlow_GetTaskList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asyncFlowClient) GetTaskScheduleCfgList(ctx context.Context, in *GetTaskScheduleCfgListRequest, opts ...grpc.CallOption) (*GetTaskScheduleCfgListReply, error) {
	out := new(GetTaskScheduleCfgListReply)
	err := c.cc.Invoke(ctx, AsyncFlow_GetTaskScheduleCfgList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asyncFlowClient) GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*GetTaskReply, error) {
	out := new(GetTaskReply)
	err := c.cc.Invoke(ctx, AsyncFlow_GetTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asyncFlowClient) SetTask(ctx context.Context, in *SetTaskRequest, opts ...grpc.CallOption) (*SetTaskReply, error) {
	out := new(SetTaskReply)
	err := c.cc.Invoke(ctx, AsyncFlow_SetTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asyncFlowClient) GetTaskCountsByType(ctx context.Context, in *GetTaskCountsByTypeRequest, opts ...grpc.CallOption) (*GetTaskCountsByTypeReply, error) {
	out := new(GetTaskCountsByTypeReply)
	err := c.cc.Invoke(ctx, AsyncFlow_GetTaskCountsByType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asyncFlowClient) RegisterTask(ctx context.Context, in *RegisterTaskRequest, opts ...grpc.CallOption) (*RegisterTaskReply, error) {
	out := new(RegisterTaskReply)
	err := c.cc.Invoke(ctx, AsyncFlow_RegisterTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asyncFlowClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error) {
	out := new(PingReply)
	err := c.cc.Invoke(ctx, AsyncFlow_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AsyncFlowServer is the server API for AsyncFlow service.
// All implementations must embed UnimplementedAsyncFlowServer
// for forward compatibility
type AsyncFlowServer interface {
	CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskReply, error)
	HoldTasks(context.Context, *HoldTasksRequest) (*HoldTasksReply, error)
	GetTaskList(context.Context, *GetTaskListRequest) (*GetTaskListReply, error)
	GetTaskScheduleCfgList(context.Context, *GetTaskScheduleCfgListRequest) (*GetTaskScheduleCfgListReply, error)
	GetTask(context.Context, *GetTaskRequest) (*GetTaskReply, error)
	SetTask(context.Context, *SetTaskRequest) (*SetTaskReply, error)
	GetTaskCountsByType(context.Context, *GetTaskCountsByTypeRequest) (*GetTaskCountsByTypeReply, error)
	RegisterTask(context.Context, *RegisterTaskRequest) (*RegisterTaskReply, error)
	Ping(context.Context, *PingRequest) (*PingReply, error)
	mustEmbedUnimplementedAsyncFlowServer()
}

// UnimplementedAsyncFlowServer must be embedded to have forward compatible implementations.
type UnimplementedAsyncFlowServer struct {
}

func (UnimplementedAsyncFlowServer) CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (UnimplementedAsyncFlowServer) HoldTasks(context.Context, *HoldTasksRequest) (*HoldTasksReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HoldTasks not implemented")
}
func (UnimplementedAsyncFlowServer) GetTaskList(context.Context, *GetTaskListRequest) (*GetTaskListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskList not implemented")
}
func (UnimplementedAsyncFlowServer) GetTaskScheduleCfgList(context.Context, *GetTaskScheduleCfgListRequest) (*GetTaskScheduleCfgListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskScheduleCfgList not implemented")
}
func (UnimplementedAsyncFlowServer) GetTask(context.Context, *GetTaskRequest) (*GetTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (UnimplementedAsyncFlowServer) SetTask(context.Context, *SetTaskRequest) (*SetTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTask not implemented")
}
func (UnimplementedAsyncFlowServer) GetTaskCountsByType(context.Context, *GetTaskCountsByTypeRequest) (*GetTaskCountsByTypeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskCountsByType not implemented")
}
func (UnimplementedAsyncFlowServer) RegisterTask(context.Context, *RegisterTaskRequest) (*RegisterTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterTask not implemented")
}
func (UnimplementedAsyncFlowServer) Ping(context.Context, *PingRequest) (*PingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedAsyncFlowServer) mustEmbedUnimplementedAsyncFlowServer() {}

// UnsafeAsyncFlowServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AsyncFlowServer will
// result in compilation errors.
type UnsafeAsyncFlowServer interface {
	mustEmbedUnimplementedAsyncFlowServer()
}

func RegisterAsyncFlowServer(s grpc.ServiceRegistrar, srv AsyncFlowServer) {
	s.RegisterService(&AsyncFlow_ServiceDesc, srv)
}

func _AsyncFlow_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsyncFlowServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AsyncFlow_CreateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsyncFlowServer).CreateTask(ctx, req.(*CreateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsyncFlow_HoldTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HoldTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsyncFlowServer).HoldTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AsyncFlow_HoldTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsyncFlowServer).HoldTasks(ctx, req.(*HoldTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsyncFlow_GetTaskList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsyncFlowServer).GetTaskList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AsyncFlow_GetTaskList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsyncFlowServer).GetTaskList(ctx, req.(*GetTaskListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsyncFlow_GetTaskScheduleCfgList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskScheduleCfgListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsyncFlowServer).GetTaskScheduleCfgList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AsyncFlow_GetTaskScheduleCfgList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsyncFlowServer).GetTaskScheduleCfgList(ctx, req.(*GetTaskScheduleCfgListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsyncFlow_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsyncFlowServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AsyncFlow_GetTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsyncFlowServer).GetTask(ctx, req.(*GetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsyncFlow_SetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsyncFlowServer).SetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AsyncFlow_SetTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsyncFlowServer).SetTask(ctx, req.(*SetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsyncFlow_GetTaskCountsByType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskCountsByTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsyncFlowServer).GetTaskCountsByType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AsyncFlow_GetTaskCountsByType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsyncFlowServer).GetTaskCountsByType(ctx, req.(*GetTaskCountsByTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsyncFlow_RegisterTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsyncFlowServer).RegisterTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AsyncFlow_RegisterTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsyncFlowServer).RegisterTask(ctx, req.(*RegisterTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsyncFlow_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsyncFlowServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AsyncFlow_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsyncFlowServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AsyncFlow_ServiceDesc is the grpc.ServiceDesc for AsyncFlow service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AsyncFlow_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.asyncflow.v1.AsyncFlow",
	HandlerType: (*AsyncFlowServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTask",
			Handler:    _AsyncFlow_CreateTask_Handler,
		},
		{
			MethodName: "HoldTasks",
			Handler:    _AsyncFlow_HoldTasks_Handler,
		},
		{
			MethodName: "GetTaskList",
			Handler:    _AsyncFlow_GetTaskList_Handler,
		},
		{
			MethodName: "GetTaskScheduleCfgList",
			Handler:    _AsyncFlow_GetTaskScheduleCfgList_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _AsyncFlow_GetTask_Handler,
		},
		{
			MethodName: "SetTask",
			Handler:    _AsyncFlow_SetTask_Handler,
		},
		{
			MethodName: "GetTaskCountsByType",
			Handler:    _AsyncFlow_GetTaskCountsByType_Handler,
		},
		{
			MethodName: "RegisterTask",
			Handler:    _AsyncFlow_RegisterTask_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _AsyncFlow_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "asyncflow/v1/asyncflow.proto",
}
