// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.20.1
// source: asyncflow/v1/asyncflow.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskData *TaskData `protobuf:"bytes,1,opt,name=task_data,json=taskData,proto3" json:"task_data,omitempty"`
}

func (x *CreateTaskRequest) Reset() {
	*x = CreateTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_asyncflow_v1_asyncflow_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTaskRequest) ProtoMessage() {}

func (x *CreateTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_asyncflow_v1_asyncflow_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTaskRequest.ProtoReflect.Descriptor instead.
func (*CreateTaskRequest) Descriptor() ([]byte, []int) {
	return file_asyncflow_v1_asyncflow_proto_rawDescGZIP(), []int{0}
}

func (x *CreateTaskRequest) GetTaskData() *TaskData {
	if x != nil {
		return x.TaskData
	}
	return nil
}

type CreateTaskReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code   int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg    string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	TaskId string `protobuf:"bytes,3,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (x *CreateTaskReply) Reset() {
	*x = CreateTaskReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_asyncflow_v1_asyncflow_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTaskReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTaskReply) ProtoMessage() {}

func (x *CreateTaskReply) ProtoReflect() protoreflect.Message {
	mi := &file_asyncflow_v1_asyncflow_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTaskReply.ProtoReflect.Descriptor instead.
func (*CreateTaskReply) Descriptor() ([]byte, []int) {
	return file_asyncflow_v1_asyncflow_proto_rawDescGZIP(), []int{1}
}

func (x *CreateTaskReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateTaskReply) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CreateTaskReply) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type HoldTasksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit    int64  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	TaskType string `protobuf:"bytes,2,opt,name=task_type,json=taskType,proto3" json:"task_type,omitempty"`
}

func (x *HoldTasksRequest) Reset() {
	*x = HoldTasksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_asyncflow_v1_asyncflow_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HoldTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HoldTasksRequest) ProtoMessage() {}

func (x *HoldTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_asyncflow_v1_asyncflow_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HoldTasksRequest.ProtoReflect.Descriptor instead.
func (*HoldTasksRequest) Descriptor() ([]byte, []int) {
	return file_asyncflow_v1_asyncflow_proto_rawDescGZIP(), []int{2}
}

func (x *HoldTasksRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *HoldTasksRequest) GetTaskType() string {
	if x != nil {
		return x.TaskType
	}
	return ""
}

type HoldTasksReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32       `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg      string      `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	TaskList []*TaskData `protobuf:"bytes,3,rep,name=task_list,json=taskList,proto3" json:"task_list,omitempty"`
}

func (x *HoldTasksReply) Reset() {
	*x = HoldTasksReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_asyncflow_v1_asyncflow_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HoldTasksReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HoldTasksReply) ProtoMessage() {}

func (x *HoldTasksReply) ProtoReflect() protoreflect.Message {
	mi := &file_asyncflow_v1_asyncflow_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HoldTasksReply.ProtoReflect.Descriptor instead.
func (*HoldTasksReply) Descriptor() ([]byte, []int) {
	return file_asyncflow_v1_asyncflow_proto_rawDescGZIP(), []int{3}
}

func (x *HoldTasksReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *HoldTasksReply) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *HoldTasksReply) GetTaskList() []*TaskData {
	if x != nil {
		return x.TaskList
	}
	return nil
}

type RegisterTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskType string `protobuf:"bytes,1,opt,name=task_type,json=taskType,proto3" json:"task_type,omitempty"`
}

func (x *RegisterTaskRequest) Reset() {
	*x = RegisterTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_asyncflow_v1_asyncflow_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterTaskRequest) ProtoMessage() {}

func (x *RegisterTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_asyncflow_v1_asyncflow_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterTaskRequest.ProtoReflect.Descriptor instead.
func (*RegisterTaskRequest) Descriptor() ([]byte, []int) {
	return file_asyncflow_v1_asyncflow_proto_rawDescGZIP(), []int{4}
}

func (x *RegisterTaskRequest) GetTaskType() string {
	if x != nil {
		return x.TaskType
	}
	return ""
}

type RegisterTaskReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *RegisterTaskReply) Reset() {
	*x = RegisterTaskReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_asyncflow_v1_asyncflow_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterTaskReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterTaskReply) ProtoMessage() {}

func (x *RegisterTaskReply) ProtoReflect() protoreflect.Message {
	mi := &file_asyncflow_v1_asyncflow_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterTaskReply.ProtoReflect.Descriptor instead.
func (*RegisterTaskReply) Descriptor() ([]byte, []int) {
	return file_asyncflow_v1_asyncflow_proto_rawDescGZIP(), []int{5}
}

func (x *RegisterTaskReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RegisterTaskReply) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type GetTaskCountsByTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskType string `protobuf:"bytes,1,opt,name=task_type,json=taskType,proto3" json:"task_type,omitempty"`
}

func (x *GetTaskCountsByTypeRequest) Reset() {
	*x = GetTaskCountsByTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_asyncflow_v1_asyncflow_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskCountsByTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskCountsByTypeRequest) ProtoMessage() {}

func (x *GetTaskCountsByTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_asyncflow_v1_asyncflow_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskCountsByTypeRequest.ProtoReflect.Descriptor instead.
func (*GetTaskCountsByTypeRequest) Descriptor() ([]byte, []int) {
	return file_asyncflow_v1_asyncflow_proto_rawDescGZIP(), []int{6}
}

func (x *GetTaskCountsByTypeRequest) GetTaskType() string {
	if x != nil {
		return x.TaskType
	}
	return ""
}

type GetTaskCountsByTypeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg       string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	TaskCount int64  `protobuf:"varint,3,opt,name=task_count,json=taskCount,proto3" json:"task_count,omitempty"`
}

func (x *GetTaskCountsByTypeReply) Reset() {
	*x = GetTaskCountsByTypeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_asyncflow_v1_asyncflow_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskCountsByTypeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskCountsByTypeReply) ProtoMessage() {}

func (x *GetTaskCountsByTypeReply) ProtoReflect() protoreflect.Message {
	mi := &file_asyncflow_v1_asyncflow_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskCountsByTypeReply.ProtoReflect.Descriptor instead.
func (*GetTaskCountsByTypeReply) Descriptor() ([]byte, []int) {
	return file_asyncflow_v1_asyncflow_proto_rawDescGZIP(), []int{7}
}

func (x *GetTaskCountsByTypeReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetTaskCountsByTypeReply) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetTaskCountsByTypeReply) GetTaskCount() int64 {
	if x != nil {
		return x.TaskCount
	}
	return 0
}

type SetTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskData *TaskData `protobuf:"bytes,1,opt,name=task_data,json=taskData,proto3" json:"task_data,omitempty"`
}

func (x *SetTaskRequest) Reset() {
	*x = SetTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_asyncflow_v1_asyncflow_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTaskRequest) ProtoMessage() {}

func (x *SetTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_asyncflow_v1_asyncflow_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTaskRequest.ProtoReflect.Descriptor instead.
func (*SetTaskRequest) Descriptor() ([]byte, []int) {
	return file_asyncflow_v1_asyncflow_proto_rawDescGZIP(), []int{8}
}

func (x *SetTaskRequest) GetTaskData() *TaskData {
	if x != nil {
		return x.TaskData
	}
	return nil
}

type SetTaskReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *SetTaskReply) Reset() {
	*x = SetTaskReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_asyncflow_v1_asyncflow_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTaskReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTaskReply) ProtoMessage() {}

func (x *SetTaskReply) ProtoReflect() protoreflect.Message {
	mi := &file_asyncflow_v1_asyncflow_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTaskReply.ProtoReflect.Descriptor instead.
func (*SetTaskReply) Descriptor() ([]byte, []int) {
	return file_asyncflow_v1_asyncflow_proto_rawDescGZIP(), []int{9}
}

func (x *SetTaskReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SetTaskReply) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type GetTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (x *GetTaskRequest) Reset() {
	*x = GetTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_asyncflow_v1_asyncflow_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskRequest) ProtoMessage() {}

func (x *GetTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_asyncflow_v1_asyncflow_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskRequest.ProtoReflect.Descriptor instead.
func (*GetTaskRequest) Descriptor() ([]byte, []int) {
	return file_asyncflow_v1_asyncflow_proto_rawDescGZIP(), []int{10}
}

func (x *GetTaskRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type GetTaskReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32     `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg      string    `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	TaskData *TaskData `protobuf:"bytes,3,opt,name=task_data,json=taskData,proto3" json:"task_data,omitempty"`
}

func (x *GetTaskReply) Reset() {
	*x = GetTaskReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_asyncflow_v1_asyncflow_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskReply) ProtoMessage() {}

func (x *GetTaskReply) ProtoReflect() protoreflect.Message {
	mi := &file_asyncflow_v1_asyncflow_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskReply.ProtoReflect.Descriptor instead.
func (*GetTaskReply) Descriptor() ([]byte, []int) {
	return file_asyncflow_v1_asyncflow_proto_rawDescGZIP(), []int{11}
}

func (x *GetTaskReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetTaskReply) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetTaskReply) GetTaskData() *TaskData {
	if x != nil {
		return x.TaskData
	}
	return nil
}

type GetTaskScheduleCfgListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetTaskScheduleCfgListRequest) Reset() {
	*x = GetTaskScheduleCfgListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_asyncflow_v1_asyncflow_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskScheduleCfgListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskScheduleCfgListRequest) ProtoMessage() {}

func (x *GetTaskScheduleCfgListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_asyncflow_v1_asyncflow_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskScheduleCfgListRequest.ProtoReflect.Descriptor instead.
func (*GetTaskScheduleCfgListRequest) Descriptor() ([]byte, []int) {
	return file_asyncflow_v1_asyncflow_proto_rawDescGZIP(), []int{12}
}

type GetTaskScheduleCfgListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code                int32              `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg                 string             `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	TaskScheduleCfgList []*TaskScheduleCfg `protobuf:"bytes,3,rep,name=task_schedule_cfg_list,json=taskScheduleCfgList,proto3" json:"task_schedule_cfg_list,omitempty"`
}

func (x *GetTaskScheduleCfgListReply) Reset() {
	*x = GetTaskScheduleCfgListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_asyncflow_v1_asyncflow_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskScheduleCfgListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskScheduleCfgListReply) ProtoMessage() {}

func (x *GetTaskScheduleCfgListReply) ProtoReflect() protoreflect.Message {
	mi := &file_asyncflow_v1_asyncflow_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskScheduleCfgListReply.ProtoReflect.Descriptor instead.
func (*GetTaskScheduleCfgListReply) Descriptor() ([]byte, []int) {
	return file_asyncflow_v1_asyncflow_proto_rawDescGZIP(), []int{13}
}

func (x *GetTaskScheduleCfgListReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetTaskScheduleCfgListReply) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetTaskScheduleCfgListReply) GetTaskScheduleCfgList() []*TaskScheduleCfg {
	if x != nil {
		return x.TaskScheduleCfgList
	}
	return nil
}

type GetTaskListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   int64  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Limit    int64  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	TaskType string `protobuf:"bytes,3,opt,name=task_type,json=taskType,proto3" json:"task_type,omitempty"`
}

func (x *GetTaskListRequest) Reset() {
	*x = GetTaskListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_asyncflow_v1_asyncflow_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskListRequest) ProtoMessage() {}

func (x *GetTaskListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_asyncflow_v1_asyncflow_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskListRequest.ProtoReflect.Descriptor instead.
func (*GetTaskListRequest) Descriptor() ([]byte, []int) {
	return file_asyncflow_v1_asyncflow_proto_rawDescGZIP(), []int{14}
}

func (x *GetTaskListRequest) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetTaskListRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetTaskListRequest) GetTaskType() string {
	if x != nil {
		return x.TaskType
	}
	return ""
}

type GetTaskListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32       `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg      string      `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	TaskList []*TaskData `protobuf:"bytes,3,rep,name=task_list,json=taskList,proto3" json:"task_list,omitempty"`
}

func (x *GetTaskListReply) Reset() {
	*x = GetTaskListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_asyncflow_v1_asyncflow_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskListReply) ProtoMessage() {}

func (x *GetTaskListReply) ProtoReflect() protoreflect.Message {
	mi := &file_asyncflow_v1_asyncflow_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskListReply.ProtoReflect.Descriptor instead.
func (*GetTaskListReply) Descriptor() ([]byte, []int) {
	return file_asyncflow_v1_asyncflow_proto_rawDescGZIP(), []int{15}
}

func (x *GetTaskListReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetTaskListReply) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetTaskListReply) GetTaskList() []*TaskData {
	if x != nil {
		return x.TaskList
	}
	return nil
}

type TaskData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId           string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	TaskId           string                 `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	TaskType         string                 `protobuf:"bytes,3,opt,name=task_type,json=taskType,proto3" json:"task_type,omitempty"`
	TaskStage        string                 `protobuf:"bytes,4,opt,name=task_stage,json=taskStage,proto3" json:"task_stage,omitempty"`
	Status           int64                  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	Priority         *int64                 `protobuf:"varint,6,opt,name=priority,proto3,oneof" json:"priority,omitempty"`
	CrtRetryNum      int64                  `protobuf:"varint,7,opt,name=crt_retry_num,json=crtRetryNum,proto3" json:"crt_retry_num,omitempty"`
	MaxRetryNum      int64                  `protobuf:"varint,8,opt,name=max_retry_num,json=maxRetryNum,proto3" json:"max_retry_num,omitempty"`
	MaxRetryInterval int64                  `protobuf:"varint,9,opt,name=max_retry_interval,json=maxRetryInterval,proto3" json:"max_retry_interval,omitempty"`
	ScheduleLog      string                 `protobuf:"bytes,10,opt,name=schedule_log,json=scheduleLog,proto3" json:"schedule_log,omitempty"`
	Context          string                 `protobuf:"bytes,11,opt,name=context,proto3" json:"context,omitempty"`
	OrderTime        int64                  `protobuf:"varint,12,opt,name=order_time,json=orderTime,proto3" json:"order_time,omitempty"`
	CreateTime       *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	ModifyTime       *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=modify_time,json=modifyTime,proto3" json:"modify_time,omitempty"`
}

func (x *TaskData) Reset() {
	*x = TaskData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_asyncflow_v1_asyncflow_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskData) ProtoMessage() {}

func (x *TaskData) ProtoReflect() protoreflect.Message {
	mi := &file_asyncflow_v1_asyncflow_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskData.ProtoReflect.Descriptor instead.
func (*TaskData) Descriptor() ([]byte, []int) {
	return file_asyncflow_v1_asyncflow_proto_rawDescGZIP(), []int{16}
}

func (x *TaskData) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *TaskData) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskData) GetTaskType() string {
	if x != nil {
		return x.TaskType
	}
	return ""
}

func (x *TaskData) GetTaskStage() string {
	if x != nil {
		return x.TaskStage
	}
	return ""
}

func (x *TaskData) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *TaskData) GetPriority() int64 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

func (x *TaskData) GetCrtRetryNum() int64 {
	if x != nil {
		return x.CrtRetryNum
	}
	return 0
}

func (x *TaskData) GetMaxRetryNum() int64 {
	if x != nil {
		return x.MaxRetryNum
	}
	return 0
}

func (x *TaskData) GetMaxRetryInterval() int64 {
	if x != nil {
		return x.MaxRetryInterval
	}
	return 0
}

func (x *TaskData) GetScheduleLog() string {
	if x != nil {
		return x.ScheduleLog
	}
	return ""
}

func (x *TaskData) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *TaskData) GetOrderTime() int64 {
	if x != nil {
		return x.OrderTime
	}
	return 0
}

func (x *TaskData) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *TaskData) GetModifyTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifyTime
	}
	return nil
}

type TaskScheduleCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskType          string                 `protobuf:"bytes,1,opt,name=task_type,json=taskType,proto3" json:"task_type,omitempty"`
	ScheduleLimit     int64                  `protobuf:"varint,2,opt,name=schedule_limit,json=scheduleLimit,proto3" json:"schedule_limit,omitempty"`
	ScheduleInterval  int64                  `protobuf:"varint,3,opt,name=schedule_interval,json=scheduleInterval,proto3" json:"schedule_interval,omitempty"`
	MaxProcessingTime int64                  `protobuf:"varint,4,opt,name=max_processing_time,json=maxProcessingTime,proto3" json:"max_processing_time,omitempty"`
	MaxRetryNum       int64                  `protobuf:"varint,5,opt,name=max_retry_num,json=maxRetryNum,proto3" json:"max_retry_num,omitempty"`
	RetryInterval     int64                  `protobuf:"varint,6,opt,name=retry_interval,json=retryInterval,proto3" json:"retry_interval,omitempty"`
	MaxRetryInterval  int64                  `protobuf:"varint,7,opt,name=max_retry_interval,json=maxRetryInterval,proto3" json:"max_retry_interval,omitempty"`
	CreateTime        *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	ModifyTime        *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=modify_time,json=modifyTime,proto3" json:"modify_time,omitempty"`
}

func (x *TaskScheduleCfg) Reset() {
	*x = TaskScheduleCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_asyncflow_v1_asyncflow_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskScheduleCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskScheduleCfg) ProtoMessage() {}

func (x *TaskScheduleCfg) ProtoReflect() protoreflect.Message {
	mi := &file_asyncflow_v1_asyncflow_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskScheduleCfg.ProtoReflect.Descriptor instead.
func (*TaskScheduleCfg) Descriptor() ([]byte, []int) {
	return file_asyncflow_v1_asyncflow_proto_rawDescGZIP(), []int{17}
}

func (x *TaskScheduleCfg) GetTaskType() string {
	if x != nil {
		return x.TaskType
	}
	return ""
}

func (x *TaskScheduleCfg) GetScheduleLimit() int64 {
	if x != nil {
		return x.ScheduleLimit
	}
	return 0
}

func (x *TaskScheduleCfg) GetScheduleInterval() int64 {
	if x != nil {
		return x.ScheduleInterval
	}
	return 0
}

func (x *TaskScheduleCfg) GetMaxProcessingTime() int64 {
	if x != nil {
		return x.MaxProcessingTime
	}
	return 0
}

func (x *TaskScheduleCfg) GetMaxRetryNum() int64 {
	if x != nil {
		return x.MaxRetryNum
	}
	return 0
}

func (x *TaskScheduleCfg) GetRetryInterval() int64 {
	if x != nil {
		return x.RetryInterval
	}
	return 0
}

func (x *TaskScheduleCfg) GetMaxRetryInterval() int64 {
	if x != nil {
		return x.MaxRetryInterval
	}
	return 0
}

func (x *TaskScheduleCfg) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *TaskScheduleCfg) GetModifyTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifyTime
	}
	return nil
}

type PingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_asyncflow_v1_asyncflow_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_asyncflow_v1_asyncflow_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_asyncflow_v1_asyncflow_proto_rawDescGZIP(), []int{18}
}

type PingReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PingReply) Reset() {
	*x = PingReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_asyncflow_v1_asyncflow_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingReply) ProtoMessage() {}

func (x *PingReply) ProtoReflect() protoreflect.Message {
	mi := &file_asyncflow_v1_asyncflow_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingReply.ProtoReflect.Descriptor instead.
func (*PingReply) Descriptor() ([]byte, []int) {
	return file_asyncflow_v1_asyncflow_proto_rawDescGZIP(), []int{19}
}

var File_asyncflow_v1_asyncflow_proto protoreflect.FileDescriptor

var file_asyncflow_v1_asyncflow_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x73, 0x79, 0x6e, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x4c, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x73,
	0x79, 0x6e, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x22, 0x50, 0x0a,
	0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22,
	0x45, 0x0a, 0x10, 0x48, 0x6f, 0x6c, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61,
	0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x22, 0x6f, 0x0a, 0x0e, 0x48, 0x6f, 0x6c, 0x64, 0x54, 0x61,
	0x73, 0x6b, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x37,
	0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x74,
	0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x32, 0x0a, 0x13, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x22, 0x39, 0x0a, 0x11, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x39, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73,
	0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x5f, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x49, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x73,
	0x79, 0x6e, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x22, 0x34, 0x0a,
	0x0c, 0x53, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x22, 0x29, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x6d,
	0x0a, 0x0c, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x12, 0x37, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x73,
	0x79, 0x6e, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x22, 0x1f, 0x0a,
	0x1d, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x43, 0x66, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x9b,
	0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x43, 0x66, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x12, 0x56, 0x0a, 0x16, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x63, 0x66, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x73, 0x79, 0x6e, 0x63,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x43, 0x66, 0x67, 0x52, 0x13, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x66, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x5f, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x22, 0x71, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x37, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x8a, 0x04, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x74, 0x72,
	0x79, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x74,
	0x52, 0x65, 0x74, 0x72, 0x79, 0x4e, 0x75, 0x6d, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f,
	0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x79, 0x4e, 0x75, 0x6d, 0x12, 0x2c, 0x0a, 0x12,
	0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x74,
	0x72, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0xa5, 0x03,
	0x0a, 0x0f, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x66,
	0x67, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x11, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x52, 0x65,
	0x74, 0x72, 0x79, 0x4e, 0x75, 0x6d, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x72, 0x65, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x2c, 0x0a,
	0x12, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x52, 0x65,
	0x74, 0x72, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x3b, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x0d, 0x0a, 0x0b, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x0b, 0x0a, 0x09, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x32, 0xb2, 0x08, 0x0a, 0x09, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x12,
	0x70, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x23, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x22, 0x0f, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x3a, 0x01,
	0x2a, 0x12, 0x6c, 0x0a, 0x09, 0x48, 0x6f, 0x6c, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x22,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76,
	0x31, 0x2e, 0x48, 0x6f, 0x6c, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x6c, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x22, 0x0e, 0x2f, 0x76,
	0x31, 0x2f, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x3a, 0x01, 0x2a, 0x12,
	0x72, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x73, 0x79, 0x6e, 0x63,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13,
	0x12, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0xa0, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x66, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x43, 0x66, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x43, 0x66, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x26,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x5f,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x63, 0x66,
	0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x61, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73,
	0x6b, 0x12, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x12, 0x0c, 0x2f, 0x76, 0x31,
	0x2f, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x64, 0x0a, 0x07, 0x53, 0x65, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x12, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x73, 0x79, 0x6e, 0x63,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x73, 0x79,
	0x6e, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x22, 0x0c,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x3a, 0x01, 0x2a, 0x12,
	0x94, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x73,
	0x79, 0x6e, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61,
	0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x73, 0x79, 0x6e,
	0x63, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x67,
	0x65, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x5f, 0x62,
	0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x78, 0x0a, 0x0c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x73, 0x79,
	0x6e, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x3a, 0x01, 0x2a,
	0x12, 0x54, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x73, 0x79, 0x6e, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x73,
	0x79, 0x6e, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x10, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0a, 0x12, 0x08, 0x2f, 0x76,
	0x31, 0x2f, 0x70, 0x69, 0x6e, 0x67, 0x42, 0x5d, 0x0a, 0x10, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x73,
	0x79, 0x6e, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x50, 0x01, 0x5a, 0x47, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x69, 0x74, 0x73, 0x74, 0x6f, 0x72,
	0x6d, 0x68, 0x75, 0x62, 0x2f, 0x62, 0x69, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x6d, 0x2f, 0x7a, 0x68,
	0x75, 0x67, 0x65, 0x71, 0x69, 0x6e, 0x67, 0x2f, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x66, 0x6c, 0x6f,
	0x77, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x2f,
	0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_asyncflow_v1_asyncflow_proto_rawDescOnce sync.Once
	file_asyncflow_v1_asyncflow_proto_rawDescData = file_asyncflow_v1_asyncflow_proto_rawDesc
)

func file_asyncflow_v1_asyncflow_proto_rawDescGZIP() []byte {
	file_asyncflow_v1_asyncflow_proto_rawDescOnce.Do(func() {
		file_asyncflow_v1_asyncflow_proto_rawDescData = protoimpl.X.CompressGZIP(file_asyncflow_v1_asyncflow_proto_rawDescData)
	})
	return file_asyncflow_v1_asyncflow_proto_rawDescData
}

var file_asyncflow_v1_asyncflow_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_asyncflow_v1_asyncflow_proto_goTypes = []interface{}{
	(*CreateTaskRequest)(nil),             // 0: api.asyncflow.v1.CreateTaskRequest
	(*CreateTaskReply)(nil),               // 1: api.asyncflow.v1.CreateTaskReply
	(*HoldTasksRequest)(nil),              // 2: api.asyncflow.v1.HoldTasksRequest
	(*HoldTasksReply)(nil),                // 3: api.asyncflow.v1.HoldTasksReply
	(*RegisterTaskRequest)(nil),           // 4: api.asyncflow.v1.RegisterTaskRequest
	(*RegisterTaskReply)(nil),             // 5: api.asyncflow.v1.RegisterTaskReply
	(*GetTaskCountsByTypeRequest)(nil),    // 6: api.asyncflow.v1.GetTaskCountsByTypeRequest
	(*GetTaskCountsByTypeReply)(nil),      // 7: api.asyncflow.v1.GetTaskCountsByTypeReply
	(*SetTaskRequest)(nil),                // 8: api.asyncflow.v1.SetTaskRequest
	(*SetTaskReply)(nil),                  // 9: api.asyncflow.v1.SetTaskReply
	(*GetTaskRequest)(nil),                // 10: api.asyncflow.v1.GetTaskRequest
	(*GetTaskReply)(nil),                  // 11: api.asyncflow.v1.GetTaskReply
	(*GetTaskScheduleCfgListRequest)(nil), // 12: api.asyncflow.v1.GetTaskScheduleCfgListRequest
	(*GetTaskScheduleCfgListReply)(nil),   // 13: api.asyncflow.v1.GetTaskScheduleCfgListReply
	(*GetTaskListRequest)(nil),            // 14: api.asyncflow.v1.GetTaskListRequest
	(*GetTaskListReply)(nil),              // 15: api.asyncflow.v1.GetTaskListReply
	(*TaskData)(nil),                      // 16: api.asyncflow.v1.TaskData
	(*TaskScheduleCfg)(nil),               // 17: api.asyncflow.v1.TaskScheduleCfg
	(*PingRequest)(nil),                   // 18: api.asyncflow.v1.PingRequest
	(*PingReply)(nil),                     // 19: api.asyncflow.v1.PingReply
	(*timestamppb.Timestamp)(nil),         // 20: google.protobuf.Timestamp
}
var file_asyncflow_v1_asyncflow_proto_depIdxs = []int32{
	16, // 0: api.asyncflow.v1.CreateTaskRequest.task_data:type_name -> api.asyncflow.v1.TaskData
	16, // 1: api.asyncflow.v1.HoldTasksReply.task_list:type_name -> api.asyncflow.v1.TaskData
	16, // 2: api.asyncflow.v1.SetTaskRequest.task_data:type_name -> api.asyncflow.v1.TaskData
	16, // 3: api.asyncflow.v1.GetTaskReply.task_data:type_name -> api.asyncflow.v1.TaskData
	17, // 4: api.asyncflow.v1.GetTaskScheduleCfgListReply.task_schedule_cfg_list:type_name -> api.asyncflow.v1.TaskScheduleCfg
	16, // 5: api.asyncflow.v1.GetTaskListReply.task_list:type_name -> api.asyncflow.v1.TaskData
	20, // 6: api.asyncflow.v1.TaskData.create_time:type_name -> google.protobuf.Timestamp
	20, // 7: api.asyncflow.v1.TaskData.modify_time:type_name -> google.protobuf.Timestamp
	20, // 8: api.asyncflow.v1.TaskScheduleCfg.create_time:type_name -> google.protobuf.Timestamp
	20, // 9: api.asyncflow.v1.TaskScheduleCfg.modify_time:type_name -> google.protobuf.Timestamp
	0,  // 10: api.asyncflow.v1.AsyncFlow.CreateTask:input_type -> api.asyncflow.v1.CreateTaskRequest
	2,  // 11: api.asyncflow.v1.AsyncFlow.HoldTasks:input_type -> api.asyncflow.v1.HoldTasksRequest
	14, // 12: api.asyncflow.v1.AsyncFlow.GetTaskList:input_type -> api.asyncflow.v1.GetTaskListRequest
	12, // 13: api.asyncflow.v1.AsyncFlow.GetTaskScheduleCfgList:input_type -> api.asyncflow.v1.GetTaskScheduleCfgListRequest
	10, // 14: api.asyncflow.v1.AsyncFlow.GetTask:input_type -> api.asyncflow.v1.GetTaskRequest
	8,  // 15: api.asyncflow.v1.AsyncFlow.SetTask:input_type -> api.asyncflow.v1.SetTaskRequest
	6,  // 16: api.asyncflow.v1.AsyncFlow.GetTaskCountsByType:input_type -> api.asyncflow.v1.GetTaskCountsByTypeRequest
	4,  // 17: api.asyncflow.v1.AsyncFlow.RegisterTask:input_type -> api.asyncflow.v1.RegisterTaskRequest
	18, // 18: api.asyncflow.v1.AsyncFlow.Ping:input_type -> api.asyncflow.v1.PingRequest
	1,  // 19: api.asyncflow.v1.AsyncFlow.CreateTask:output_type -> api.asyncflow.v1.CreateTaskReply
	3,  // 20: api.asyncflow.v1.AsyncFlow.HoldTasks:output_type -> api.asyncflow.v1.HoldTasksReply
	15, // 21: api.asyncflow.v1.AsyncFlow.GetTaskList:output_type -> api.asyncflow.v1.GetTaskListReply
	13, // 22: api.asyncflow.v1.AsyncFlow.GetTaskScheduleCfgList:output_type -> api.asyncflow.v1.GetTaskScheduleCfgListReply
	11, // 23: api.asyncflow.v1.AsyncFlow.GetTask:output_type -> api.asyncflow.v1.GetTaskReply
	9,  // 24: api.asyncflow.v1.AsyncFlow.SetTask:output_type -> api.asyncflow.v1.SetTaskReply
	7,  // 25: api.asyncflow.v1.AsyncFlow.GetTaskCountsByType:output_type -> api.asyncflow.v1.GetTaskCountsByTypeReply
	5,  // 26: api.asyncflow.v1.AsyncFlow.RegisterTask:output_type -> api.asyncflow.v1.RegisterTaskReply
	19, // 27: api.asyncflow.v1.AsyncFlow.Ping:output_type -> api.asyncflow.v1.PingReply
	19, // [19:28] is the sub-list for method output_type
	10, // [10:19] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_asyncflow_v1_asyncflow_proto_init() }
func file_asyncflow_v1_asyncflow_proto_init() {
	if File_asyncflow_v1_asyncflow_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_asyncflow_v1_asyncflow_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_asyncflow_v1_asyncflow_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTaskReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_asyncflow_v1_asyncflow_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HoldTasksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_asyncflow_v1_asyncflow_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HoldTasksReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_asyncflow_v1_asyncflow_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_asyncflow_v1_asyncflow_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterTaskReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_asyncflow_v1_asyncflow_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskCountsByTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_asyncflow_v1_asyncflow_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskCountsByTypeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_asyncflow_v1_asyncflow_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_asyncflow_v1_asyncflow_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTaskReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_asyncflow_v1_asyncflow_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_asyncflow_v1_asyncflow_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_asyncflow_v1_asyncflow_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskScheduleCfgListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_asyncflow_v1_asyncflow_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskScheduleCfgListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_asyncflow_v1_asyncflow_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_asyncflow_v1_asyncflow_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_asyncflow_v1_asyncflow_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_asyncflow_v1_asyncflow_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskScheduleCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_asyncflow_v1_asyncflow_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_asyncflow_v1_asyncflow_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_asyncflow_v1_asyncflow_proto_msgTypes[16].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_asyncflow_v1_asyncflow_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_asyncflow_v1_asyncflow_proto_goTypes,
		DependencyIndexes: file_asyncflow_v1_asyncflow_proto_depIdxs,
		MessageInfos:      file_asyncflow_v1_asyncflow_proto_msgTypes,
	}.Build()
	File_asyncflow_v1_asyncflow_proto = out.File
	file_asyncflow_v1_asyncflow_proto_rawDesc = nil
	file_asyncflow_v1_asyncflow_proto_goTypes = nil
	file_asyncflow_v1_asyncflow_proto_depIdxs = nil
}
