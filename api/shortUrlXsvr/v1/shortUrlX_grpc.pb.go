// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.1
// source: shortUrlXsvr/v1/shortUrlX.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ShortUrlX_CreateShortUrl_FullMethodName = "/api.shortUrlX.v1.ShortUrlX/CreateShortUrl"
	ShortUrlX_GetLongUrl_FullMethodName     = "/api.shortUrlX.v1.ShortUrlX/GetLongUrl"
	ShortUrlX_Ping_FullMethodName           = "/api.shortUrlX.v1.ShortUrlX/Ping"
)

// ShortUrlXClient is the client API for ShortUrlX service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShortUrlXClient interface {
	CreateShortUrl(ctx context.Context, in *CreateShortUrlRequest, opts ...grpc.CallOption) (*CreateShortUrlReply, error)
	GetLongUrl(ctx context.Context, in *GetLongUrlRequest, opts ...grpc.CallOption) (*GetLongUrlReply, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error)
}

type shortUrlXClient struct {
	cc grpc.ClientConnInterface
}

func NewShortUrlXClient(cc grpc.ClientConnInterface) ShortUrlXClient {
	return &shortUrlXClient{cc}
}

func (c *shortUrlXClient) CreateShortUrl(ctx context.Context, in *CreateShortUrlRequest, opts ...grpc.CallOption) (*CreateShortUrlReply, error) {
	out := new(CreateShortUrlReply)
	err := c.cc.Invoke(ctx, ShortUrlX_CreateShortUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortUrlXClient) GetLongUrl(ctx context.Context, in *GetLongUrlRequest, opts ...grpc.CallOption) (*GetLongUrlReply, error) {
	out := new(GetLongUrlReply)
	err := c.cc.Invoke(ctx, ShortUrlX_GetLongUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortUrlXClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error) {
	out := new(PingReply)
	err := c.cc.Invoke(ctx, ShortUrlX_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortUrlXServer is the server API for ShortUrlX service.
// All implementations must embed UnimplementedShortUrlXServer
// for forward compatibility
type ShortUrlXServer interface {
	CreateShortUrl(context.Context, *CreateShortUrlRequest) (*CreateShortUrlReply, error)
	GetLongUrl(context.Context, *GetLongUrlRequest) (*GetLongUrlReply, error)
	Ping(context.Context, *PingRequest) (*PingReply, error)
	mustEmbedUnimplementedShortUrlXServer()
}

// UnimplementedShortUrlXServer must be embedded to have forward compatible implementations.
type UnimplementedShortUrlXServer struct {
}

func (UnimplementedShortUrlXServer) CreateShortUrl(context.Context, *CreateShortUrlRequest) (*CreateShortUrlReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShortUrl not implemented")
}
func (UnimplementedShortUrlXServer) GetLongUrl(context.Context, *GetLongUrlRequest) (*GetLongUrlReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLongUrl not implemented")
}
func (UnimplementedShortUrlXServer) Ping(context.Context, *PingRequest) (*PingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedShortUrlXServer) mustEmbedUnimplementedShortUrlXServer() {}

// UnsafeShortUrlXServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortUrlXServer will
// result in compilation errors.
type UnsafeShortUrlXServer interface {
	mustEmbedUnimplementedShortUrlXServer()
}

func RegisterShortUrlXServer(s grpc.ServiceRegistrar, srv ShortUrlXServer) {
	s.RegisterService(&ShortUrlX_ServiceDesc, srv)
}

func _ShortUrlX_CreateShortUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShortUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortUrlXServer).CreateShortUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortUrlX_CreateShortUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortUrlXServer).CreateShortUrl(ctx, req.(*CreateShortUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortUrlX_GetLongUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLongUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortUrlXServer).GetLongUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortUrlX_GetLongUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortUrlXServer).GetLongUrl(ctx, req.(*GetLongUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortUrlX_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortUrlXServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortUrlX_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortUrlXServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShortUrlX_ServiceDesc is the grpc.ServiceDesc for ShortUrlX service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShortUrlX_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.shortUrlX.v1.ShortUrlX",
	HandlerType: (*ShortUrlXServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateShortUrl",
			Handler:    _ShortUrlX_CreateShortUrl_Handler,
		},
		{
			MethodName: "GetLongUrl",
			Handler:    _ShortUrlX_GetLongUrl_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _ShortUrlX_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shortUrlXsvr/v1/shortUrlX.proto",
}
