// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.1
// - protoc             v3.20.1
// source: shortUrlXsvr/v1/shortUrlX.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationShortUrlXCreateShortUrl = "/api.shortUrlX.v1.ShortUrlX/CreateShortUrl"
const OperationShortUrlXGetLongUrl = "/api.shortUrlX.v1.ShortUrlX/GetLongUrl"
const OperationShortUrlXPing = "/api.shortUrlX.v1.ShortUrlX/Ping"

type ShortUrlXHTTPServer interface {
	CreateShortUrl(context.Context, *CreateShortUrlRequest) (*CreateShortUrlReply, error)
	GetLongUrl(context.Context, *GetLongUrlRequest) (*GetLongUrlReply, error)
	Ping(context.Context, *PingRequest) (*PingReply, error)
}

func RegisterShortUrlXHTTPServer(s *http.Server, srv ShortUrlXHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/shorten", _ShortUrlX_CreateShortUrl0_HTTP_Handler(srv))
	r.POST("/v1/:short_url", _ShortUrlX_GetLongUrl0_HTTP_Handler(srv))
	r.GET("/v1/ping", _ShortUrlX_Ping0_HTTP_Handler(srv))
}

func _ShortUrlX_CreateShortUrl0_HTTP_Handler(srv ShortUrlXHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateShortUrlRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShortUrlXCreateShortUrl)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateShortUrl(ctx, req.(*CreateShortUrlRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateShortUrlReply)
		return ctx.Result(200, reply)
	}
}

func _ShortUrlX_GetLongUrl0_HTTP_Handler(srv ShortUrlXHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetLongUrlRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShortUrlXGetLongUrl)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetLongUrl(ctx, req.(*GetLongUrlRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetLongUrlReply)
		return ctx.Result(200, reply)
	}
}

func _ShortUrlX_Ping0_HTTP_Handler(srv ShortUrlXHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PingRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShortUrlXPing)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Ping(ctx, req.(*PingRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PingReply)
		return ctx.Result(200, reply)
	}
}

type ShortUrlXHTTPClient interface {
	CreateShortUrl(ctx context.Context, req *CreateShortUrlRequest, opts ...http.CallOption) (rsp *CreateShortUrlReply, err error)
	GetLongUrl(ctx context.Context, req *GetLongUrlRequest, opts ...http.CallOption) (rsp *GetLongUrlReply, err error)
	Ping(ctx context.Context, req *PingRequest, opts ...http.CallOption) (rsp *PingReply, err error)
}

type ShortUrlXHTTPClientImpl struct {
	cc *http.Client
}

func NewShortUrlXHTTPClient(client *http.Client) ShortUrlXHTTPClient {
	return &ShortUrlXHTTPClientImpl{client}
}

func (c *ShortUrlXHTTPClientImpl) CreateShortUrl(ctx context.Context, in *CreateShortUrlRequest, opts ...http.CallOption) (*CreateShortUrlReply, error) {
	var out CreateShortUrlReply
	pattern := "/v1/shorten"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationShortUrlXCreateShortUrl))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShortUrlXHTTPClientImpl) GetLongUrl(ctx context.Context, in *GetLongUrlRequest, opts ...http.CallOption) (*GetLongUrlReply, error) {
	var out GetLongUrlReply
	pattern := "/v1/:short_url"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationShortUrlXGetLongUrl))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShortUrlXHTTPClientImpl) Ping(ctx context.Context, in *PingRequest, opts ...http.CallOption) (*PingReply, error) {
	var out PingReply
	pattern := "/v1/ping"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShortUrlXPing))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
